Day 1 of SQL

SQL - Structured Query Language
Database (DB) - store and retrieve data
SSMS - SQL Server Managment Studio

SQL is a declarative language vs other languages we learn are procedural.
Procedural is very specific step by step
Declarative is broad, take the quiz is how you take the quiz.

SQL is not case sensitive
SQL use single quotes only ' not "

!= is not equal (! is not)

What is a database: a collection of tables
Table : a collection of rows and columns
Rows represent records - each person represented by a row
Columns represent fields - name, yrs experience, age, eye color, etc.. are represented by a column

SQL statement is called a Query
Table names are usually nouns

you can highlight something in SQLQuery to execute only that portion

***CREATE A REPOSITORY FOR SQL***

Ctrl + r hot key for SQL messages
Ctrl + n hot key for New Query

****Key word to remember while reading SQL tables: Select
1. Select (reading data)
2. could list all the columns out that you want to read or... for all the columns in the same order they are represented in the table use *(asterisk): field to view
3. From (prefaces the table name)
4. Table name (in our case is Customer)
		Select * From Customer

Order is a keyword in SSMS, so to tell SSMS that the table name order is not a keyword is [order]. turns order into an object not a keyword

Result Set: is the info spit out after Execute (F5)

**Join View (in SSMS/SQL): example 
	select Name, Date, Amount
	from [order]
	join customer
	on [order].customerid = customer.id

Alias for table name: example [order] o 
	o now represents [order]
Always follows from or join for table names
Alias for columns: as '---' example: Name as 'Customer Name'

**Inner Join: (type of Join View) two tables referenced with something in common

Manipulating the order of the output table (Result Set)
Order by Clause (almost aways will be the last thing in your Query)

Order by Clause: example
order by (column name), (column name) desc

**Outer Join (use left join) left means to produce in result set even if there isnt a value (NULL)

Null is null is null, has no value yes... it is its own thing. Does not have a value

Exercise: Do an inner join name date amount in desc

	select Name, Date, Amount
	from [order] o
	join customer c
	on c.id = o.customerid
	order by name, date, amount desc

Functions:
convert(varchar(10), date, 1) as 'Order Date'
sum(o.Amount) as 'Total Amount of Sales'
avg(


Where (boolean expression) clause comes after the on clause

Boolean expression: evaluates to true or false
	example: where amount >= 500
		where o.amount > 250 and o.amount < 600

and		or		not
>>>>>>look in notebook for explanation (Tues 1/30/2018)

Example:
select * from customer
where state != 'KY' and state != 'IN'

same thing

select * from customer
where state not in ('KY', 'IN')

Say we want to find the total number of sales per customer displayed...
clause before the order by clause called: group by table name and column name
	group by c.name

			select
			from
			join
			on
			where
			group by
			order by
			having 

**having clause (just like a where clause but is for summing amounts
having sum(amount) > 1000


Subselect: a select statement inside another select statment
	Example: select customerid, date, amount
		from [order]
		where amount > (
		select avg(amount) from [order]
		)

select * 
from [order] o
where amount < (select max(amount)
from [order] o
join customer c
on c.id = o.CustomerId
where c.state = 'OH')

---------------------------------------------------------

Day 2 of SQL

Design feature allows you to create tables within SSMS

data types:
int - integer (1,2,3,4,5,6,....)
varchar(30) - allows 30 maximum characters (Steven Bruce)
	variable character
nvarchar is for international symbols for 2 bit characters
decimal(3,1) - 

*Primary Key(PK): uniquely identifies every row
	     cannot change (do not ever change)
	     no inherent value
	     PK can NEVER be NULL
Greg labels it as (id)

Foreign Key: is a primary key in another table
	Example: MajorId
		may be NULL

new Function:
concatination: CONCAT( )
	Example: select concat(s.FirstName, ' ', s.LastName) as 'Name', c.Description as 'Class'

--Find all the classes that Aaron Zell is taking
select concat(s.FirstName, ' ', s.LastName) as 'Name', c.Description as 'Class'
from student s
join Schedule sc
	on s.id = sc.studentid
join class c
	on c.id = sc.ClassId
where s.FirstName = 'Aaron' and s.LastName = 'Zell'

Join Clause practice is saved as an SQL Practice Assignment

------------END SELECT STATEMENTS-----------

Update Keyword:
Update statement - to change data that already exists
Syntax:
update tablename set
Column = 'value',
Column = 'value'
where column = 'value' and column = 'value'
example: update student set
	 FirstName = 'Gregory',
	 LastName = 'Doud'
	 Where FirstName = 'Greg' and LastName = 'Duod'
Note for Where, use id number if you know it!

***If you do an update statement you want a Where clause

= is an assignment, figure out what is on the right side and shove it into the left

Note ' ' go around strings like a name, not around numbers

-----------END UPDATE STATEMENTS-------------

Insert Syntax: {} means not a requirement
INSERT into <tablename>
{(columnname1, columnname2,...)}
Values
(value1, value2, ...)

Example: insert into contact values ('Steven', 'Brucesc726@gmail.com', '513-600-2851')


*Note amount of values must match the amount of columns and Primary Keys cannot be included.

-------------END INSERT STATEMENTS---------
BE VERY CAREFUL WITH DELETE: HAVE A WHERE STATEMENT
Delete from student
where <condition>

Select *(In place of delete to double check delete)
Delete from Student
where <condition>


Data Manipulation Language (DML): Select, Insert, update, delete

Data Definition Language (DDL): defining data, building tables

FK ---> PK
1. Restrict: if a PK is referenced to a FK then delete will fail on PK
2. Nullify: delete will NULL anything under the criteria such as where id = 3
3. Cascade: delete the major record then all the students that are pointing to that record

---------Start Point of DDL--------------
DML: Select, Insert, Update, Delete
DDL: Create, Alter, Drop
Create - something new
Alter - changing something
Drop - like deleting

Syntax:
Create <object we are creating> Table Contact (<Column definitions> Name varchar(50) not null, 
email varchar(50), 
Phone varchar(12) not null)

Create Table Syntax
CREATE TABLE <tablename> (
<columnname> <type> {not null} {default n}
{check (<condition>)}
{primary key {identity(seed, increment)}}
[or..]
{foreign key references <primarytable>(columnname)}
{unique {clustered}},
...
)

check (allows  you to define what goes into the column like a, b, or  c)

unique: you would use this on things like user names, no two users could have a username of Brucesc.
	*do not need to worry about the cluster feature

----------------------------
Column Types (common)
int - positive or negative Integer
{n}varchar(len) - {DBCS|} Ascii string with max length of 'len'
bit - represents a boolean; values of 0 (false) and 1 (true). Can also be NULL...
datetime - a date includeing a time component
decimal(digits, decimals) - represents decimal numbers; 'digits' represents all digits in number and 'decimals' represents number of decimal places

-----------------------------------------

Columns - Null or Not Null
Declares whether a column value can be null.
Default is column CAN be null
If not null:
	Can never be set to null
	Must be provided a value on insert unless a default exists

**If you can't decided to NULL or Not NULL, make it Not NULL

---------------------

Create Table Example:

CREATE TABLE Employee (
Id int primary key identity(1,1),
Name nvarchar(50) not null,
YearsOfService int,
DepartmentId int foreign key references Department(Id),
Active bit not null default 1,
DateCreated datetime not null default Now(),
DateUpdated datetime
)

FK must be created after their PK are made

---------------------------
Drop Feature:
Drop Table <tablename>
if exists ---> Drop Table if exists <tablename>

Drop:
Employee
Manager
Department

Create:
Department
Manager
Employee

-----------------------
CREATE Database <DB>
USE <DB>

Example Start:

use master -- This is best practice for starting a database
go
drop database if  exists Corporate
go
Create database Corporate
go
use Corporate
go

--------------------------











































