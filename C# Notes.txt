BASICS
started using bits to create bytes (half a byte is a nibble)
how many bytes is a KB? 1000 or 1024 KiB

Managed vs Unmanaged:
.NET manages your memory
garbage collector utility
we dont have to worry about all the low level memory managment

Microsoft intermediate language (MSIL)

Common type system (CTS)

console is a class
system.console.writeline()
namespace class method

namespace childname space 
namespace defines the method

using System; -- if i dont tell you otherwise use system namespace

way of grouping all these features in .NET into categories

you use a namespace to define down a class

collection of classes, inside the classes are methods
put them all together in an Assembly
dynamic linking library (.DLL)

***Microsoft developers network (MSDN) research for what class goes in what assembly

How to reference an assembly?

Remember NuGet**

Software development toolkits (SDK's)

if you close a pane (ie. solution explorer go to view

Spaces, Tabs, and carriage returns are free

every statement inside a codeblock has a ending semicolon (;)
codeblocks do not

All methods do work and all methods must have ()




First off, are there any addition assemblyes needed

in C# // is one way to comment out

default namespace is the project name

void means it returns nothing
There can be only one Main()

C# requires double quotes (" ")

String Formating
("{0} owes us {1} as of {2}",s,x+y,date)



//System.Console.Beep(400, 5000);
           //System.Console.WriteLine("Beep");
            //System.Speech.Synthesis.SpeechSynthesizer speak = new System.Speech.Synthesis.SpeechSynthesizer();
            //speak.Speak("Hello world! Want to play a game?");

&copy;

16 bit is 2 bytes

@ is to ignore escape characters

Say I want to make a translator

Console Apps are good for scheduled jobs

pattern for creating variables
data type (ie. int) <name of variable> (ie. X or Price)

Camel Cassing: priceFinished
Pascal Cassing: PriceUnFinished

float length = 5.5F;

decimal cost = 5.5M;

Cannot use (,) in numbers because a comma (,) is considered a seperator

format numbers on output {0:N} {0:D} {0:C}

//int length;
            //int width;

            //Console.WriteLine("Please enter the Length:");
            //Console.WriteLine("Please enter the Width:");
            //length = Console.WriteLine("Please enter the Length:");
            //width = Console.WriteLine("Please enter the Width:");

            //int Area = length * width;

            //Console.WriteLine("The Area is: {0}" Area)

------------MINE ^^ -------------Teachers vv---------------

            Console.WriteLine("What's the length? ");
            string stringLength = "";
            stringLength = Console.ReadLine();
            decimal length = 0;
            length = decimal.Parse(stringLength);

            Console.Write("What's the width? ");
            string stringWidth = "";
            stringWidth = Console.ReadLine();
            decimal width = 0;
            width = decimal.Parse(stringWidth);

            Console.WriteLine("The area is " + length * width);

            Console.ReadLine();



when you see var it is asking for the type or it helps you create objects from classes (will use this a lot in Linq queries) lets the compiler figure out what type 'it' is.

Console.WriteLine("") --> these are strings
Console.ReadLine() --> these are also strings

So, in our calculate the area example we had to ask the user for an input (length/width) which was then given back to us in a string type. This data (string type) needed to be parsed (var.parse)

For Loop - good for when we want to loop something for a known number of times

for( int i=0; i < 100; i = i + 1) -----> i = i + 1 is the same thing as i++
{
	COnsole.WriteLine("I wil never...");
}

While loop and do/while loop:

while is 0 or many times : while(true) change the true or it will run forever, dont false or it wont run
Read the data until the condition ends

do/while is 1 or many times : good for interacting with humans

int[] is saying an array of integers

string status = "Active";
int val;
if (status == "Active")
{
val =1;
}
else
{
val = 2
}

int val2 = status == "Active" ? 2:1;

everything in .NET is a class
classes are blocks of code
compile into either exe or dll (executible) or (assembly)
executibles load dlls


---------------------KNOW THESE FOR A JOB INTERVIEW-----------------

***How many looping structures, list them?
for (count)
foreach (iterate)
while (0 or more times)
do {} while (1 or more times)

***How many conditional structures, list them?
if
switch
x = () ? val1 : val2;
--------------------------------------------------------------------
Reading list 2/7/2018 Wednesday Night:
255-263
273-278
325-329
330-351
------------------------------------------------------------------------------
COLLECTIONS:
Single variable name that holds a lot of items (objects)

//int[] things = new int[6]; -- an integer array called things is initialized with 6 spots
            //for (int i = 0; i < 6; i++) -- for loop
            //{
            //    Console.WriteLine("Enter a number: ");
            //    string theString = Console.ReadLine();
            //    things[i] = int.Parse(theString);
            //    total = total + things[i];
            //}
            //Console.WriteLine(total);

            //Console.ReadLine();

ArrayList money = new ArrayList();
            money.Add(5000.99M);
            money.Add(45.99M);
            money.Add(768.01M);

            money.Sort();

            foreach (object item in money)
            {
                Console.WriteLine((decimal)item*2);

            }
            Console.ReadLine();

Be able to describe what a stack and queue list are, but know how to use an Array, ArrayList and Hashtable

Data type: Generic Collection <>--> List

see these <> they are talking about generic data type
-----------------------------------------------------------------------------------------
Friday 2/9/2018

Things we call Structures and things we call Classes

Methods return:
nohing
returns a single type (uses return = )
return using a REF ( for structures)
return using an implied REF (for classes)
return using an OUT
return using Tuples (C# 7 and later)

Boxing and Unboxing (hiding and showing)

Encapsulation creating the black box?
Typically will put classes in a separate folder/file

Go back over:
Loops - For, For each, While, Do While
Switch Statements

Sololearn.com
---------------------------------------------------------------------------------
Main Method is the entry point to all programs, has to exist in one of the classes and only once. Main does not have to be void, and if it isn't then most likely it will return int. Cannot take the parameters out. More on that later though...

Everything inside the class has access to everything else inside the class, because of the scope

*********Remember to test often and in small increments! (make small changes and test)
**Have a series of test cases for testing

Build compiles the solution
Start runs the execution

****Refactoring: NEVER duplicate code, if you see a time when you will have to duplicate, create a method instead

base. is a keyword we can use when our current class has inherited from a parent class

ToString() is helpful for turning other data types into strings




Three aspects of object oriented programming (OOP):

**Encapsulation: bring together the things that go together and separate them from the rest of the world. Class creation. properties and methods are brought together and serparated from the rest of the world

**Inheritance: take a parent class create a new class that has the same properties as the parent and add something new. When you inherit you get everthing that is not private

**Polymorphism: (virtual/override) 

Composition: (the 4th pillar of OOP) using a class inside of another class

Interface: Similar to a class except:
	1. No properties
	2. Methods, but no body
.NET framework is filled with them. Need to know how to use them
Defined with a capital I
Interfaces can inherit other interfaces
is a contract between two entities. The way they are going to interact

Interpolation ($): string message = $"A(n) {animalName} says {animalSound}."; // shortcut concatination (interpolation)

---------------------------------------------------------------------
Projects: Executables (.exe) need some kind of file to run it
Putting everthing into one executable is not always the best way
Dynamic Link Library (.dll)

exe depends on a dll
dll can share other dll
.config is xml code
.pdb is the debugging information that visual studio provides

use the library to store your usable information like classes
dll's can be shared (assemblys)

FirstName = "Steven";  this is an assignment statement FYI

SQL interface to C#, Accessing SQL from C#:
Some objects we have to work with:
Connection: need Server, Database, Trusted_Connection
	Server: What machine are we accessing
	Database: Which database are we accessing
Command
Data Reader
Results Set
Column


Connection:
 public class SqlCustomer
    {
        // create a method to list all the customers from SSMS
        public void List()
        {
            string connStr = @"server=DESKTOP-7CC7HCF\SQLEXPRESS;database=SqlTutorial;Trusted_Connection=true";
            // conn is a convention
            SqlConnection conn = new SqlConnection(connStr);
            conn.Open();


        }
    }

Command:
SqlCommand cmd = new SqlCommand(sql, conn);

DataReader:
SqlDataReader reader = cmd.ExecuteReader();

ResultSet:





public class SqlCustomer
    {
        // create a method to list all the customers from SSMS
        public void List()
        {
            string connStr = @"server=DESKTOP-7CC7HCF\SQLEXPRESS;database=SqlTutorial;Trusted_Connection=true";
            // conn is a convention
            SqlConnection conn = new SqlConnection(connStr);
            conn.Open();
            if (conn.State != System.Data.ConnectionState.Open)
            {
                Console.WriteLine("The connection didn't open.");
                return;
            }
            //Console.WriteLine("Connection open successful!");
            string sql = "select * from customer"; // run your sql statements in SSMS to verify they work first
            SqlCommand cmd = new SqlCommand(sql, conn);
            SqlDataReader reader = cmd.ExecuteReader();
            if (!reader.HasRows)
            {
                Console.WriteLine("Result has no row.");
                return;
            }
            while(reader.Read())
            {
                string name = reader.GetString(reader.GetOrdinal("Name"));
                Console.WriteLine($"Name is {name}");
            }


            conn.Close(); //ALWAYS CLOSE WHEN YOU ARE DONE WITH THE CONNECTION!!!



where you have a table in sql you will have a class in c#

stuff them in a collection. what and how many? dont know, so use List<type goes here>

List<Customer> customers = new List<Customer>();


----------------------------------------------------------------------------

Example to Open a connection to SQL through C# Visual Studio:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks; 
using System.Data.SqlClient; //added this

namespace SqlReadCustomer
{
    public class SqlCustomer
    {
        // create a method to list all the customers from SSMS
        public List<Customer> List() // List<Customer> is a type and can only take customer things. List is like an array but it is dynamic
        {
            // Must first establish a connection to SQL. Need what server is hosting the database and what database is holding the instance you want
            string connStr = @"server=DESKTOP-7CC7HCF\SQLEXPRESS;database=SqlTutorial;Trusted_Connection=true"; // server= This can be found in SSMS at the master database level; database= Name of the database; Trusted_Connection= can only use this when accessing a database on your local machine
            // conn is a convention
            SqlConnection conn = new SqlConnection(connStr); // New instance of SqlConnection (don't forget using statement System.Data.SqlClient;) then pass in the connection string (previous line)
            conn.Open(); // Method to open an sql connection
            if (conn.State != System.Data.ConnectionState.Open) // if statement to test for a connection made. the .State
            {
                Console.WriteLine("The connection didn't open.");
                return null; // because we cant return List<Customer> if it returns null then we know something went wrong
            }
            //Console.WriteLine("Connection open successful!");
            string sql = "select * from customer"; // run your sql statements in SSMS to verify they work first. 
            SqlCommand cmd = new SqlCommand(sql, conn); // SqlCommand allows us to make sql commands. instance of SqlCommand (cmd) with parameters filled in. sql is our string select statement. conn is the SqlConnection
            SqlDataReader reader = cmd.ExecuteReader(); // DataReader step. Called the execute reader method. returns a SqlDataReader object
            if (!reader.HasRows) // If this has rows move past, if not display this message
            {
                Console.WriteLine("Result has no row.");
                return null;
            }

            List<Customer> customers = new List<Customer>(); // Generic list of customer things we are going to fill


            while(reader.Read()) // reader points to the first row
            {
                int id = reader.GetInt32(reader.GetOrdinal("Id"));                
                string name = reader.GetString(reader.GetOrdinal("Name"));
                string city = reader.GetString(reader.GetOrdinal("City"));
                string state = reader.GetString(reader.GetOrdinal("State"));
                bool isCorpAcct = reader.GetBoolean(reader.GetOrdinal("IsCorpAcct"));
                int creditLimit = reader.GetInt32(reader.GetOrdinal("CreditLimit"));
                bool active = reader.GetBoolean(reader.GetOrdinal("Active")); // pull all these out and stuff them into local variables (below)

                Customer customer = new Customer(); // take those pulled data and put them into and instance of customer
                customer.Id = id;
                customer.Name = name;
                customer.City = city;
                customer.State = state;
                customer.IsCorpAccount = isCorpAcct;
                customer.CreditLimit = creditLimit;
                customer.Active = active;

                customers.Add(customer); // take the newly filled instance of Customer customer and stuff it into the List<Customer> customers


                //Console.WriteLine($"Name is {name}");
            }


            conn.Close(); //ALWAYS CLOSE WHEN YOU ARE DONE WITH THE CONNECTION!!!
            return customers;
        }
    }
}



-----------------------------------------------------------------------------------------
TEST DRIVEN DEVELOPMENT



































